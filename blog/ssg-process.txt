1:"$Sreact.fragment"
2:I[471,["266","static/chunks/870fdd6f-b872ce118a9636bf.js","874","static/chunks/874-437a265a67d6cfee.js","342","static/chunks/342-a4fd5ccc8447fed4.js","177","static/chunks/app/layout-583b488610302f7a.js"],"default"]
3:I[3149,["266","static/chunks/870fdd6f-b872ce118a9636bf.js","874","static/chunks/874-437a265a67d6cfee.js","342","static/chunks/342-a4fd5ccc8447fed4.js","177","static/chunks/app/layout-583b488610302f7a.js"],"default"]
4:I[7555,[],""]
5:I[1295,[],""]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/css/655eb1a435e46291.css","style"]
:HL["/_next/static/css/822bb3366d51e161.css","style"]
0:{"P":null,"b":"HCp43G-AzJFvUici7B790","p":"","c":["","blog","ssg-process"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","ssg-process","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/655eb1a435e46291.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","div",null,{"className":"app-container","children":[["$","$L2",null,{}],["$","div",null,{"className":"main-container","children":[["$","$L3",null,{"content":{"title":"Blog Explorer","items":[{"label":"Project","type":"folder","children":[{"label":"about-this-project.md","type":"file","href":"/blog/about-this-project","active":false}]},{"label":"General","type":"folder","children":[{"label":"example-blog.md","type":"file","href":"/blog/example-blog","active":false},{"label":"my-first-blog.md","type":"file","href":"/blog/my-first-blog","active":false},{"label":"my-second-blog.md","type":"file","href":"/blog/my-second-blog","active":false}]},{"label":"Next.js","type":"folder","children":[{"label":"ssg-process.md","type":"file","href":"/blog/ssg-process","active":false}]},{"label":"Tech","type":"folder","children":[{"label":"test-post.md","type":"file","href":"/blog/test-post","active":false}]}]}}],["$","main",null,{"className":"content-area","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],["$","footer",null,{"className":"footer-bar","children":["$","div",null,{"className":"footer-content","children":["$","p",null,{"children":["© ",2025," Lopyad Page"]}]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","ssg-process","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/822bb3366d51e161.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],null],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
11:T123c,<h1>이 블로그의 정적 사이트 생성(SSG) 과정 이해하기</h1>
<p>이 블로그는 Next.js의 <strong>정적 사이트 생성(Static Site Generation, SSG)</strong> 기능을 활용하여 빌드되고 있습니다. SSG는 웹사이트의 모든 페이지를 빌드 시점에 미리 HTML 파일로 생성하는 방식입니다. 이 접근 방식은 사용자에게 매우 빠른 로딩 속도와 뛰어난 성능을 제공하며, CDN(Content Delivery Network)을 통해 효율적으로 배포할 수 있다는 장점이 있습니다.</p>
<h2>SSG 빌드 프로세스</h2>
<p>이 프로젝트의 SSG 과정은 다음과 같은 단계로 이루어집니다.</p>
<h3>1. 데이터 소스: 마크다운 파일</h3>
<p>모든 블로그 포스트는 <code>content/blog/</code> 디렉터리에 있는 마크다운(<code>.md</code>) 파일로 관리됩니다. 각 파일의 상단에는 <code>---</code>로 둘러싸인 <strong>Frontmatter</strong> 영역이 있어, 포스트의 제목, 날짜, 카테고리와 같은 메타데이터를 정의합니다.</p>
<pre><code class="language-markdown">---
title: "테스트 포스트"
date: "2025-07-18"
category: "Tech"
---

이곳에 포스트 본문이 작성됩니다...
</code></pre>
<h3>2. 데이터 가져오기 및 파싱</h3>
<p>Next.js는 빌드 시점에 각 페이지에 필요한 데이터를 미리 가져옵니다. 이 프로젝트는 App Router를 사용하므로, 별도의 데이터 페칭 함수(<code>getStaticProps</code>) 없이 서버 컴포넌트 내에서 직접 데이터 로직을 수행합니다. 이 로직은 <code>src/lib/postManager.ts</code> 파일에 구현되어 있습니다.</p>
<ul>
<li><code>getSortedPostsData()</code>: 모든 마크다운 파일을 읽어 메타데이터를 파싱하고, 날짜순으로 정렬하여 포스트 목록을 생성합니다. 이 데이터는 블로그 인덱스 페이지 (<code>/blog</code>)를 렌더링하는 데 사용됩니다.</li>
<li><code>getPostData(slug)</code>: 특정 <code>slug</code>(파일 이름)에 해당하는 마크다운 파일을 찾아, <code>remark</code>와 <code>remark-html</code> 라이브러리를 사용해 본문을 HTML로 변환합니다. 이 데이터는 개별 블로그 포스트 페이지 (<code>/blog/[slug]</code>)를 렌더링하는 데 사용됩니다.</li>
</ul>
<h3>3. 동적 경로 생성 (<code>generateStaticParams</code>)</h3>
<p>블로그 포스트처럼 동적인 경로(<code>[slug]</code>)를 가진 페이지들을 정적으로 생성하기 위해, Next.js는 어떤 경로들을 미리 빌드해야 하는지 알아야 합니다. App Router에서는 <code>generateStaticParams</code> 함수가 이 역할을 합니다.</p>
<p><code>src/app/blog/[slug]/page.tsx</code> 파일 내에서 <code>generateStaticParams</code>는 <code>getAllPostSlugs</code> 함수를 호출하여 모든 포스트의 <code>slug</code> 목록을 반환합니다. Next.js는 이 목록을 기반으로 각 <code>slug</code>에 해당하는 HTML 페이지(예: <code>/blog/my-first-post.html</code>, <code>/blog/my-second-post.html</code>)를 빌드 시점에 모두 생성합니다.</p>
<h3>4. 페이지 렌더링 및 HTML 파일 생성</h3>
<p>Next.js는 위 단계에서 얻은 데이터와 React 컴포넌트를 결합하여 각 페이지를 렌더링하고, 그 결과를 완전한 HTML 파일로 만듭니다.</p>
<ul>
<li><code>/blog</code> 페이지는 <code>getSortedPostsData</code>의 결과로 렌더링됩니다.</li>
<li>각 <code>/blog/[slug]</code> 페이지는 <code>getPostData</code>와 <code>generateStaticParams</code>의 결과로 렌더링됩니다.</li>
</ul>
<h3>5. 빌드 결과물 (<code>out</code> 디렉터리)</h3>
<p><code>npm run build</code> 명령어를 실행하면, <code>next.config.ts</code>에 <code>output: 'export'</code> 설정이 되어 있으므로 Next.js는 빌드된 정적 파일들을 <code>out</code> 디렉터리에 생성합니다. 이 디렉터리에는 HTML, CSS, JavaScript, 이미지 등 웹사이트를 구성하는 모든 파일이 포함되어 있습니다.</p>
<h3>6. 배포</h3>
<p>마지막으로, <code>out</code> 디렉터리의 내용 전체를 GitHub Pages와 같은 정적 호스팅 서비스에 배포하면 됩니다. 이 프로젝트에서는 GitHub Actions 워크플로우(<code>.github/workflows/deploy.yml</code>)가 이 과정을 자동화하여, <code>main</code> 브랜치에 변경 사항이 푸시될 때마다 자동으로 빌드하고 배포합니다.</p>
<p>이러한 SSG 과정을 통해, 사용자는 서버의 도움 없이 미리 만들어진 HTML 페이지를 즉시 받아보게 되어 최상의 성능을 경험할 수 있습니다.</p>
6:["$","article",null,{"children":[["$","h1",null,{"className":"blog-title","children":"이 블로그의 정적 사이트 생성(SSG) 과정"}],["$","div",null,{"className":"blog-time","children":"2025-07-22"}],["$","hr",null,{}],["$","div",null,{"className":"markdown-content","dangerouslySetInnerHTML":{"__html":"$11"}}]]}]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
a:{"metadata":[],"error":null,"digest":"$undefined"}
f:"$a:metadata"
